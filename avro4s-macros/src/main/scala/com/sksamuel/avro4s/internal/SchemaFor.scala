package com.sksamuel.avro4s.internal

import java.io.Serializable

import com.sksamuel.avro4s.{DefaultNamingStrategy, NamingStrategy}
import org.apache.avro.Schema

object SchemaFor {

  /**
    * Creates a [[Schema]] for an arbitrary type T.
    *
    * Requires an instance of [[DataTypeFor]] which is usually
    * generated by the avro4s macros.
    *
    * Usage:
    *
    * val schema = SchemaFor[MyType]
    */
  def apply[T](implicit dataTypeFor: DataTypeFor[T]) = SchemaEncoder.create(dataTypeFor.dataType)
}

/**
  * Encodes a [[DataType]] into an Avro Schema.
  */
trait SchemaEncoder[T <: DataType] extends Serializable {
  def encode(dataType: T): Schema
}

object SchemaEncoder extends ValueTypeSchemaEncoders {
  def create[T <: DataType](dataType: T)(implicit namingStrategy: NamingStrategy = DefaultNamingStrategy): Schema = dataType match {
    case array: ArrayType => ArrayTypeSchemaEncoder.encode(array)
    case BinaryType => BinaryTypeSchemaEncoder.encode(BinaryType)
    case BooleanType => BooleanSchemaEncoder.encode(BooleanType)
    case ByteType => ByteTypeSchemaEncoder.encode(ByteType)
    case dec: DecimalType => DecimalTypeSchemaEncoder.encode(dec)
    case DoubleType => DoubleTypeSchemaEncoder.encode(DoubleType)
    case enum: EnumType => EnumTypeSchemaEncoder.encode(enum)
    case FloatType => FloatTypeSchemaEncoder.encode(FloatType)
    case fixed: FixedType => FixedTypeSchemaEncoder.encode(fixed)
    case IntType => IntTypeSchemaEncoder.encode(IntType)
    case LongType => LongTypeSchemaEncoder.encode(LongType)
    case map: MapType => MapTypeSchemaEncoder.encode(map)
    case nullable: NullableType => NullableSchemaEncoder.encode(nullable)
    case ShortType => ShortTypeSchemaEncoder.encode(ShortType)
    case StringType => StringSchemaEncoder.encode(StringType)
    case struct: StructType => new StructSchemaEncoder(namingStrategy).encode(struct)
    case LocalDateType => LocalDateTypeSchemaEncoder.encode(LocalDateType)
    case LocalTimeType => LocalTimeTypeSchemaEncoder.encode(LocalTimeType)
    case LocalDateTimeType => LocalDateTimeTypeSchemaEncoder.encode(LocalDateTimeType)
    case TimestampType => TimestampTypeSchemaEncoder.encode(TimestampType)
    case union: UnionType => UnionTypeSchemaEncoder.encode(union)
    case UUIDType => UUIDTypeSchemaEncoder.encode(UUIDType)
  }
}